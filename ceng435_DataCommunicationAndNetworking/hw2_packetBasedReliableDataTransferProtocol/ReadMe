//Kadir Berkay Aydemir 1941780, Batyr Charyyev 2001527

//How to Run:

1. Compile client.c on source, server.c on destination.
	we used threads so additional thread flags should be added
	ex:
		gcc client.c -w -o client -pthread
		gcc server.c -w -o server -pthread

2. Run server and client as

	.server #of_switches
	.client input.txt #of_switches ip1 ip2 ... 

	ex: topology3
		./server 3
		./client input.txt 3 10.10.1.2 10.10.2.2 10.10.3.2

Note: These IPs are IPs of data interfaces of destination.

Note: In provided input.txt there was EOF in it before actual EOF. So it created problem while we are reading input.
	 We consulted with assistant and get permission to generate our own input file size of 5MB

3. Inorder to generate input we should use generator.cpp
	ex:
		g++ generator.cpp -w -o generator
		./generator > input.txt


//How our Code works:

1. Client program takes an input file which is 5MB size, number of switches and IPs of data interfaces of destination.

2. Client program works in "Stop&Wait" manner. It creates threads for receiving ACK packets but only one thread sends the packets to the destination.

3. After sending packets threads wait for the ACKs. After receiving ACKs, threads lets the sending thread to send new messages. If ACK is corrupted, client again sends the same messages to the destination. If ACK fails to come, timeout event happens and client again sends the same messages. While sending and receiving packet client allways checks the checksum of packets. 

4. In the destination side there are threads for receiving incoming packets. After receiving packets it program checks the checksum and if the packet is not corrupted it sends positive ACK to the sender side.

5. In the destination side the messages are put to the buffer in the order of their sequence number. Sequence number also indicates the index of the packet in the buffer.
