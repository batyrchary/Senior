Abstract— Switching from traditional computing environment to edge computing environment gave users easy scalability with low cost and many other facilities. As edge computing evolved, challenges in resource management started to emerge. Heterogeneous nature of resources, security, interoperability and need for high performance are only few of many. To increase efficiency of resources and customer satisfaction these challenges should be tackled. In this paper, we will address how we can rank resources depending on need of individual users. For users interested in reliability and security, resources with those characteristics will be recommended. However, we will have no clue about characteristics of new users, for this reason we will also look at how we can initialize resources for new users. Also, possible abuses of system to increase ranking of resources and methods to prevent them will be discussed. To achieve our goal and to get some insight we will check ranking and recommending systems of sites like UBER and NETFLIX.
There exist many brokerage services for variety of purposes. The main aim of brokerage service is being intermediary between clients and services.  As number of the service providers increased the variety of the services also increased. The difficulty in selecting one particular service provider emerged the need for the brokers, as consequence number of brokerage services also increased. 
Since there are many brokerage services, it is important to have good algorithm to match services and consumers in order to stay in competition. Lyft and Uber can be given as the best analogous systems, where they act as broker between drivers and clients. In order for Lyft and Uber to be successful it is important to make satisfied both drivers and clients, otherwise users may switch to another brokerage service. Since clients want the most appropriate driver for them, it is important to rank drivers based on clients’ preference and recommend drivers based on this ranking. With the same logic clients should also be ranked based on drivers’ preference and recommended based on this ranking because both clients and drivers are users of the brokerage service like Uber and Lyft. 
For the Uber and Lyft ranking and recommending system may depend on many parameters like cost and distance between client and driver. The importing thing that we should consider when designing such ranking and recommending system is abusers of system, especially abuses from driver side. They can increase their ranking by giving the best possible score with fake account, in order to increase their profit. Another important thing that should be considered is, what should be the score of new participated user. These two might be considered the most important challenge of designing such ranking and recommending system.
The term brokerage service most of the time encounters in business however it also exists in computer science. Message broker can be given as an example to one of them. A message broker is an intermediary program module that translates a message from the formal messaging protocol of the sender to the formal messaging protocol of the receiver [11]. Another one is broker architecture pattern which is used in distributed software systems where broker is responsible to coordinate communication between decoupled components, such as forwarding requests and transmitting results [12]. Cloud service broker is another one which is frequently encountered in computer science. As cloud service providers increased the requirements of consumer demands become more complex and as a result demand for brokerage system emerged [5].
In this paper, we are looking at ranking and recommending system for brokerage service of edge computing. The reason we focus on edge computing instead of cloud computing is computing is expected to move from the central cloud to the network edge. Bringing resources and content closer to edge users is one advantage of edge computing over cloud computing. In our system edge resource providers will be similar to drivers in Uber and edge resource users will be similar to clients.
Key component of our ranking and recommending system for edge resource brokers will be user behavior. System will analyze user behavior and recommend resources based on this analyzes. It will focus on four parameters when analyzing user behavior. These four parameters are latency, bandwidth, power consumption and price. For users which pays attention to latency resources with low latency will be recommended and for those which wants low cost, resources that cheaper will be recommended. In order to determine what user wants we will look at past actions of user, what kind of resource it selected.  Another thing that we should concern is minimum requirement of users. For example client may put restriction for the cost, client may demand maximum cost that it can afford.  At the same time resource provider may also put restriction of the cost. 
We will encounter the same challenges that we mentioned before.  However, additional to these challenges the new one emerges which is what if client runs malicious programs on edge resource, how to prevent it. If we extend this even discussion further it may deteriorate the performance of edge resource. Which will eventually lead to complaints for that resource from other users. As a result, ranking of edge resource may drop for no reason.
In next sections of paper related works to this project will be provided, then we will continue with the approach that we will use in methodology part. In results section we will provide result of comparison between the results that we obtain with results of projects stated in related works section.

II.	BACKGROUND

In this section of our paper we will look at related works conducted in this field. Studies related to any ranking system, precautions to prevent abuses, analyzes of user behavior and studies related to edge resources will be related to our project. Since there can be enormous amount of them we will present the most relevant studies in this section of our work. The most important works will be discussed in detail and other studies will be discussed in concise for future references. 
The study [1] by Choksi et al. is a system which can generate a set of ranked content items for display on the driver device [1]. By determining current location of the driver system determines degree of relevance of each item. It is mostly used by Uber technologies.
The system provides tailored content for each service provider (e.g. drivers, providing ride-share services) in order to increase efficiency and business. Tailored content may depend on many factors like, current location of driver, route in which driver is traveling, events near them and driver preferences. This tailored content will also prevent gathering all service providers to one location. The system assigns expiration time to each particular item in order to prevent one high ranked content to be always displayed to users. The relation between this project and our project can be constructed by assuming similarity of service providers (e.g. drivers) with edge resource providers and consumers with edge resource consumers.  To sum up in this paper content ranking system for Uber drivers provided. System operates by analyzing current location and preferences of the driver. 
The Broker@Cloud project by Dimitrios et. al. [5] envisions brokerage system for cloud services which are increasing with a number and versatility. Their motivation is quality assurance and optimization of services. They modeled cloud service lifecycle in order to conceptualize the context in which their brokerage software framework is planned to operate. They partitioned the lifecycle into three partitions as Service Engineering, Service Onboarding and Service Operation. System also have Service Evolution as crosscutting phase.
They collected requirements for their brokerage framework by organizing workshop with two pilot companies in cloud computing markets. However, this may not generalize full requirements of the brokerage system for cloud service providers and consumers. We can clearly see the impact of it in results that they obtained. Requirements were categorized into four categories which are Themes, Epics, Capabilities and User Stories. 
Theme keeps requirements related to objectives of software product whereas Epic keeps requirements related to customer needs. Requirements in Capabilities category are related to services to be provided by software and User Story is a something the system needs to do for the users. As a result of their workshop with two companies they collected 4 Themes, 9 Epics, 15 Capabilities and 38 User Story requirements. Overall, in this paper design of brokerage system is provided. This framework is based on requirements of cloud providers and cloud service lifecycle. 
Pratiksha et. al. conducted study [3], where they discuss about a system which ranks and recommends mobile apps not only considering reviews and popularity but also from security and privacy perspective.
In the system that they proposed ranking is based on exploration results of app dataset and evaluate certain kind of permissions such as normal permissions which have minimal risk to other application, dangerous permissions providing access to private data and signature permission which required system signature certifications like, ability to control the overall process of the system. 
Another interesting study [4] by Buqing et. al. presents recommendation system for Mashup services based on user interest and social network of services. They build and analyze social network of Mashup service providers and extracts users' interest from their usage history to provide recommendation list to users.  By conducting experiments with dataset containing 6076 Mashups, 4492 Web APIs and 1739 Tags they we able to show that their approach can effectively recommend not only Mashup services but also possible Mashup service composition path by considering the users’ personal interest and the relationships among services. They retrieved dataset from Programmable web.com and they used randomly chosen 10 Mashups services from original dataset as user's service history. They used DCG method to evaluate the matching degree between the user's interest and the top K similar Mashup services in the recommendation list.
Jiahui et. al. [6] investigated personalized news recommendation system for Google News. They analyzed large scale of anonymized Google News users click logs. Based on this analyzes they created framework for predicting users' current news interest. They designed content-based recommendation mechanism which uses learned user profiles to generate personalized news recommending system. They created hybrid recommender system from their content-based recommendation mechanism and currently existing mechanism which is collaborative filtering system. Current collaborative filtering recommended news based on users with similar click history. However, it has some drawbacks like first-rate problem where assigning rate to new news becomes major issue [7, 8].
They evaluated this hybrid news recommending system by deploying it to Google News and analyzing traffic. Around 10,000 users live traffic at Google News were analyzed. Users were randomly assigned to control group which uses existing recommendation system and test group which uses the new proposed hybrid recommendation system. Aggregate click-through rate analysis was performed over fully anonymized click logs over period of 34 days. Click history of last 12 months was used to compute users' interests. Number of clicks on the recommended news articles (CTR) is computed. Over the period of 34 days except only 3 days the new proposed hybrid system performed better than current existing system. 
Furthermore, total number of articles user click were also compared. The result show that new recommending system creates more focused news readers because there was no increase in total number of news clicked. In the other words improved recommending system "stole" clicks from existing recommending system. 
Since some fraudulent users may manipulate ranking chart by boosting their resources, it worth to mention some related works to detect such behaviors.
In study [2] by H.Zhu et. al. proposes the approach to detect ranking fraud of mobile apps. They have three phases in their approach such as raising phase, maintaining phase and recession phase. System detects rank fraud in raising and maintaining phases by comparative analyses of historical app rating and current app rating. Historical comments are also analyzed to detect fraud.
Other studies which can be further explored are [9] by Liwei et. al., in this paper they present multi-criteria recommendation based clustering of users in "preference lattice" according to their criteria preferences. Study [10] by Zhiwen et. al. where they propose recommendation method for multiple users based on user profile merging and constructing common user profile.
While some studies investigated ranking and recommending system based on users' preference, our approach will differ from them by analyzing users behavior and interest additionally it will try to prevent ranking frauds. There exist studies like [4] which analyzes user's interest for ranking and recommending system however they are not designed for our field of interest.

III.	METHODOLOGY
Companies like Appirio, Appregatta, Cloud Sherpas and ComputeNext can be given as sample of cloud brokers [13]. Some of them are very successful in this field and some of them moved to another fields. For example Cloud Sherpas the company claimed in 2013 to be the world’s top Cloud Service Broker(CSB) providing Google Apps, Salesforce.com and ServiceNow brokerage services. Ultimately became better known as a consulting firm acquired by Accenture. Still there exist successful CSBs however, our aim is to come up with good brokerage system for edge resources. In this paper, we will be focusing only on few specific components of this system which are ranking and recommending of edge resources and prevention of system abuses.

We are planning to start with analyses of similar brokerage systems like Uber, IBM cloud brokerage and Ethereum. Our aim is to see how these systems works in general, see what do we have today and get some idea about this concept. Then we will continue by determining the main properties of cloud providers like AWS, Azure and IBM cloud. The main objective is to determine main properties and features which plays crucial role in customer satisfaction. This will give idea about functionalities that we need to focus on when we design our system. After this step, we can check major cloud service like AWS, Azure, Google Cloud and IBM Cloud to see if the main properties that we determined in our previous step plays role in success of this cloud services. To prevent user abuses like increasing rankings with illegitimate ways, we can check platforms like Google Play, Amazon etc. where fraudulent users can deceptively boost the search rank and popularity of their products. We can analyse how these platforms deal with this kind of situation. In order to prevent system abuses like running malicious programs on edge resources and affecting performance of edge resource and overall performance of system, we can look how cloud providers tackle this issue. Finally, after each component of our system is ready we can customize small use case scenario to see our system in action. After making some measurements and collecting data we will be able to compare our system with existing ones.
Currently there does not exist edge service brokers, for this reason we will look at cloud service brokers. IBM cloud service broker is the most famous one among them and part of IBM Services Platform with Watson which infuses automation and cognition into how you consume, deliver and govern across your hybrid cloud [14]. It is made possible by combination of the analytics capabilities of IBM Watson and the acquired capabilities of Gravitant’s cloudMatrix platform [15]. They break out cloud brokerage into Platforms, Tools and Services segments. According to their analyses 67% of users use automated tools to meter departmental cloud usage, 58% of these users use automated tools for cost management purposes. Furthermore, they found out that much of resistance related to adoption of brokerage and metering tools centers around mismatched departmental goals and desired outcomes, particularly between IT and finance departments [14, 15, 16]. They collect data about what everybody deploys in cloud and bring this whole data together and then understand the pattern of usage and behaviour in terms of usage of external cloud services and understand the cost of it. They bring the group of cloud services to user based on their behaviour analyses and try to optimize their decision. Our aim is also come up with system like this for edge resources, however it is very challenging to get user data to analyse behaviour of clients. Cloud providers like Azure and AWS do not provide user data publicly so our current objective is to come up with a design and customize small use case scenario to see system in action.

Table 1 shows main features and properties of major cloud providers. It is divided into five major groups like Compute, Storage, Network and Content Delivery, Database, Management and Monitoring etc. Here Compute commonly refers to the collection of cloud computing resources that your application can run on. Storage services offer durable, highly available, and massively scalable cloud storage for your application, whether it runs in the cloud or not. Networking and Content Delivery allows you to easily provision private networks, connect your cloud application to your on-premises data centers and more. Database services refers to options for storing data, whether it’s a managed relational SQL database that’s globally distributed, or a multi-model NoSQL database designed for any scale. Finally, Management and monitoring services provide visibility into the health, performance, and utilization of your applications, workloads, and infrastructure. These main features also divide into subcategories like availability, scaling, storage, load balancing etc.  [17, 18, 19, 20, 21, 22]. There exist many features and properties related to cloud service providers however for our edge resource broker we are planning to start with four primitive features which are latency, bandwidth, power consumption and price. Because some of the features for cloud providers are not applicable for edge resources. Also these four parameters are easy to measure for real use case scenario. 

To overcome fraudulent behaviour of users we can look at FairPlay system by Mahmudur et. al. [23] which provides interesting approach to overcome rank fraud. They collected longitudinal Google Play data from 87K+ newly released apps over more than 6 months, and identified gold standard data. FairPlay organizes the analysis of longitudinal app data into the following 4 modules which are Co-Review Graph (CoReG) module identifies apps reviewed in a contiguous time window by groups of users with significantly overlapping review histories. The Review Feedback (RF) module exploits feedback left by genuine reviewers, while the Inter Review Relation (IRR) module leverages relations between reviews, ratings and install counts. The Jekyll-Hyde (JH) module monitors app permissions, with a focus on dangerous ones, to identify apps that convert from benign to malware [23]. CoReG module exploits the observation that fraudsters who control many accounts will re-use them across multiple jobs. Its goal is then to detect subsets of an app’s reviewers that have performed significant common review activities in the past. This paper proposes Pseudo Clique Finder (PCF) Algorithm, which exploits the observation that fraudsters hired to review an app are likely to post those reviews within relatively short time intervals (e.g., days). In Reviewer Feedback (RF) Module they check reviews describing negative experiences of malware fraudulent apps. They filter our fraudulent reviews then identify malware and fraud indicative feedbacks from the remaining reviews. In Jekyll-Hyde App Detection (JH) Module they analysed total number of permissions requested by malware, fraudulent and legitimate apps. However, they found out that not only malware and fraudulent apps but also legitimate apps request large numbers of permissions.  We can make use of system similar to this in order to detect fraudulent resource providers and clients.    
Another important thing that needs to be considered is initial score of new joined edge resources and clients. Giving too low score to edge resources will make them hard to get on top of ranking, because no one will want to use edge resource with low score. Giving high score is not solution either because it will make life of fraudulent and malicious users easier. One possible approach can be, giving average score of all users and resources to new joined client or service provider. This will depend on current situation of edge resources and users. 
System abuses like running malicious code on edge resource that may affect performance of edge resource and overall performance of system is another challenging problem that needs to be considered. Study [24] done by Sanjay et. al. proposes technique to detect malicious files using three steps. Which are “DNA Sequence Detection Process”, “Symbolic Detection Process” and “Process 3: Behavioral Detection Process”. The Proposed approach (PMDM) can be deployed on a VMM which remains fully transparent to guest VM and to cloud users. However, PMDM prevents the malicious code running in one VM (infected VM) to spread into another non-infected VM with help of hosted VMM [24]. In DNA Sequence Detection Process they create database of known malicious files. They convert them to DNA sequence which is done by converting the file into its binary form and change each two corresponding bits into a DNA sequence character. Then new arrived file will be converted to DNA sequence and compared with malicious files in database with 90% threshold. In Symbolic Detection Process files are clustered according to their file format. Then files are convert to symbol called symbol file. After that it is compared with symbols of conventional malware signatures. In Behavioral Detection Process they detect malicious files using a virtual machine that extensively used for this type of analysis by testing and running the file into a sandbox gives an optimal result to detect malware. For this purpose they use Anubis sandbox [25] which is free available. Anubis interact with file using API call and check the behaviour of the file to identify whether it contain malware or not.
