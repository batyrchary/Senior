Abstract—With the rapid development of Web2.0 and its related technologies, Mashup services (i.e., Web applications created by combining two or more Web APIs) are becoming a hot research topic. The explosion of Mashup services, especially the functionally similar or equivalent services, however, make services discovery more difficult than ever. In this paper, we present an approach to recommend Mashup services to users based on user interest and social network of services. This approach firstly extracts users’ interests from their Mashup service usage history and builds a social network based on social relationships information among Mashup services, Web APIs and their tags. The approach then leverages the target user’s interest and the social network to perform Mashup service recommendation. Large-scale experiments based on a real-world Mashup service dataset show that our proposed approach can effectively recommend Mashup services to users with excellent performance. Moreover, a Mashup service recommendation prototype system is developed.With the emergence of Web2.0 and its related technologies, mashups, which are Web applications created by combining two or more services, are becoming a hot research topic. Mashup technology has many advantages (such as easier programming, shorter development time, higher quality plans, and more interested outputs [1]), which make it becomes increasingly popular. For example, to April 2013, Programmableweb.com has published more than 7044 mashup services. Moreover, several mashup tools have been developed, such as Microsoft Popfly, Google Mashup Editor and IBM Mashup Center. Typical mashup applications include Map, Video and Image, Search and Shopping, News, Microblog Mashup, etc. [2-4]. The rapid growth in the number of available mashup services, coupled with the myriad of functionally similar services, makes finding suitable mashup service more difficult. Currently, existing research works in Web service ranking and recommendation mainly focus on SOAP/WSDL-based services. The fundamental difference between SOAP/WSDL-based and RESTful services (usually referred to as Web APIs) is that the latter does not have a formal model or standard description of service capabilities, which make service search, ranking and recommendation even harder [5].978-0-7695-5025-1/13 $26.00 © 2013 IEEE DOI 10.1109/ICWS.2013.23Despite this, several approaches for recommending mashup services, such as semantic-based [6], QoS-based [7] and social network based [8, 9], have been proposed. However, these existing service recommendation approaches seldom take users’ personal interests into consideration. Therefore the recommended services may not satisfy the needs of users. In addition, social relationship information among Mashup service, Web APIs and their tags has rarely been used to improve mashup service recommendation.In this paper, we propose a mashup service recommendation approach. The approach exploits both users’ interests based on their Mashup usage history and the social network based on relationships among Mashup service, Web APIs and tags, to recommend Mashup services to user. The contributions of this paper are as follows:x We propose a novel Mashup service recommendation approach based on user interest and relation among services. The user’s interest is mined from his/her service usage history.x We use a dataset crawled from ProgrammableWeb. com, which includes 6076 Mashup services, 4492 Web APIs, and 1736 tags, to construct a large-scale social network and develop a Mashup service recommendation prototype system.x We conduct a set of experiments based on real-world Mashup services. Compared with other recommendation methods, the experimental results show that our recommendation system can effectively recommend preferred Mashup services to users.The rest of this paper is organized as follows: Section II introduces related works. Section III presents our approach of Mashup service recommendation. Section IV discusses the experimental results. Section V describes the prototype system implementation. Finally, we draw conclusions and discuss our future work in Section VI.II. RELATED WORKA number of research works have been done on Web service recommendation. Most Web service recommendation approaches focus on SOAP/WSDL-based service recommendation [10-14]. Some of them takes QoS (quality of service) into consideration and tend to recommend services with optimal QoS to users based on prediction of missing QoS values of services via Collaborative Filtering. Zhang et al. [15] proposes a novel approach of proactivelyrecommending services in a workflow composition process based on service usage history. However, they may cannot be used to recommend Mashup-oriented services which are typically not described by WSDL. Actually, study on recommendation approaches of Mashup services or Web APIs are still in its preliminary stage and has received limited attention from researchers. We review some related works in terms of the following three categories.Semantic-based Mashup Service Recommendation Approaches. Based on Semantic Web, the aim of these approaches is to find Mashup services which meet the users’ requirement and have the highest matching degree via semantic similarity computation. Li et al. [6] proposed a semantics extended indexes framework for Mashup discovery, which improved the performance of the Mashup discovery processing time largely. Bianchini et al. [16] presented a recommendation system to design Mashup applications, relying on the semantic description of Mashup components for their proactive suggestion to the designer. Zhou [17] presented an approach that constructed a Web Mashup network by learning a semantic Bayesian network using a semi-supervised learning method. Elmeleegy [18] designed a MashupAdvisor, which used a semantic matching algorithm and a metric planner to modify the Mashup to produce the suggested output.QoS-based Mashup Service Recommendation Approaches. Picozzi [7] showed that the quality of single services can drive the production of recommendations, capitalized on a quality model for Mashup services, and discussed the concept of mashability. Cappiello [19] analyzed the quality properties of Mashup components (APIs), and defined a quality model which represents a valuable instrument in the hands of both component developers and Mashup composers. Cappiello [20] discussed the information quality in Mashups. Muhammad [21] reviewed the concept of Mashup in different domains and proposed a conceptual solution framework for providing quality based Mashup process.Social Network based Mashup Service Recommendation Approaches. Several works recommend Mashup service to users from the perspective of complex social networks. A social network is a social structure made up of a set of actors and the dyadic ties between these actors providing a clear way of analyzing the structure of whole social entities [22]. It can be used in Mashup service recommendation by analyzing the relationships among service providers, Mashup service, Web API, and service consumers. Maaradji discussed the necessity of considering social networks in the process of services composition and introduced a framework named Social Composer (SoCo) to provide dynamic recommendations for services discovery and selection [8,9]. Torres pointed out that most Web API discovery techniques do not consider reusing social information [23]. In addition, complex network analysis is a powerful tool to understand the large scale networks [24]. Many studies have been done to analyze networks such as the Email network and the scientist cooperation network. There are also some research works on analyzing Mashup services or Web API. Yu presented a preliminary result instudying the properties in ProgrammableWeb and proved that the cumulative frequency of APIs follows power law distribution [25]. Wang et al. emphasized on mining Mashup community from users’ perspective by analyzing the User- API and User-Tag network in ProgrammableWeb [26]. Huang et al. conducted a comprehensive network analysis to quantitatively characterize the static structure and dynamic evolution of a Service-Mashup System ecosystem [27].Existing service recommendation approaches seldom consider both users’ personal interests and service relationship. Therefore, the effectiveness of these recommendation approaches is unsatisfactory. Different from existing approaches, we propose a Mashup service recommendation based on both user interest and social information among mashup services. We extract users’ interests based on the historical Mashup services used by the users. We construct a Mashup service social network based on the social relationships information among Mashup service, Web APIs and tags. By combining the user interests with the social network, we can effectively recommend preferred Mashup services to users.In this section, we firstly present a user interest model and a social network model in Section III.A and Section III.B, respectively. Then, we present the service recommendation algorithm based on the two models in Section III.C.A. User Interest ModelTo mine the user’s interest from his/her Mashup usage history, we employ the TF/IDF technology [28]. The description documents of all Mashup services in the service recommendation system are viewed as a corpus. We use the TF/IDF approach to weight the importance of terms in the corpus. TF/IDF emphasizes the terms which appear more frequently in a specific Mashup service document than the other documents. Suppose the description document of a Mashup service contains its name, functional description, constituent Web APIs, tags, as well as its developer name.The first step is to preprocess the corpus of Mashupservice description documents to standardize words or tokensin this corpus and obtain a set of valid terms. Thepreprocessing includes word standardization, word rootingand noise word removing. Due to page limitation, the detailsare not described in this paper. Then, we use TF/IDFtechnology to weight the importance of terms in the corpus.TF/IDF is a product of two statistics, TF (term frequency)and IDF (inverse document frequency). TF is the number oftimes for a given term appears in the given document. Sincea term appears in a longer document may have higher TFthan in a shorter document regardless of the actualimportance of the term, TF is generally normalized to avoida bias towards longer document. Thus, the frequency of theterm t i j in the ithMashup service documentthfollowing Formula (1).jMashupDoci can be measured by TF. It can be defined as TF (tij , MashupDoci ) and calculated according to the 100
whereix x xx x{(t1,Wu,1),(t2,Wu,2),...,(tm,Wu,m)} (4) {(t ,W ),(t ,W ),...,(t ,W )} (5)x xthe Mashup service corpus.|{MashupDoci :tij  MashupDoci | is the number ofdocuments where term t i j appears.  If the term is notcontained in the corpus, it will lead to a division-by- zero. Therefore, it is usual to adjust it to 1 |{MashupDoci :tij  MashupDoci |.There are two sources for deriving social relationships information among different Mashup services: One is the invocation relationship information between Mashup services and Web APIs; the other is the marking relationship information between Mashup services and tags. We construct the social network model based on these social relationship information. The process for building this model has three steps.(1) Social relationship information of MashupsA Mashup in Web development is either a Web page, or Web application, which uses and combines data, presentation or functionality from two or more sources to create new services. The main characteristics of Mashup are combination, visualization and socialization.A Web API is typically a defined set of HTTP request messages along with a definition of the structure of response messages, typically expressed in JSON or XML. While "Web API" is sometimes considered a synonym for Web service, the Web 2.0 applications typically have moved away from SOAP/WSDL-based Web service towards more direct REST-style communications. Web APIs allow the combination of multiple services into new applications known as Mashups.A tag is a non-hierarchical keyword or term assigned to a piece of information. This kind of metadata helps describe an item and allows it to be found again by browsing or searching. Tags with a strong social characteristics, areTF(t ,MashupDoc ) ij ifrequency(tij ,MashupDoci ) | MashupDoc |terms and weights. The vectors of a user’s interest and a Mashup description document are shown in Formula (4) and(1) TF (tij , MashupDoci )  is the frequency of the jth term(5) respectively.UserInterestVectorMashupService iVectorwherex tk(k 1~m) is the kth term in the big Mashup in the ith Mashup service document;tij is the jth term in the ith Mashup service1 i,1 2 i,2 m i,m description document;MashupDoci  is the description document of the ithx x xservice document;Wu,k (k 1 ~ m)  is the user interest vector producedMashup service, which includes the Mashup service’ s name, description, marking tags, constituent Web APIs and developer information of this Mashup service;by using Formula(3); W (k 1 ~ m) isfrequency(tij , MashupDoci ) is number of t i j in MashupDoci ;theappearancei,k  If tk does not appear in the big Mashup service| MashupDoci | is the total number of terms in theith Mashup service document. document of the UserInterest or Mashup service document of the MashupServicei , then Wu,k 0 orWi,k 0.Finally, we compute the similarity between a user’sIDF is a measure of whether the term in a Mashup service document is common or rare across all Mashup services documents. It is obtained by dividing the total number of documents by the number of documents containing the term, and then taking the logarithm of that quotient. Its computation can be illustrated by Formula (2).| MashupDoc | (2) |{MashupDoci :tij  MashupDoci |interest and a given Mashup service description document using the cosine similarity measurement, i.e., TextSimilarity, as shown in Formula (6).IDF(t , MashupDoc) ijTextSimilarity(UserInterestVector , MashupServiceiVector )¦m (W uW ) u,kk1 i,k(¦m W2 )u(¦m (W2 ) k1 u,k k1 i,kThe Social Network Model(6)log| MashupDoc | is the total number of documents inthe Mashup service vector produced by using Formula(3);   whereB.The conventional TF/IDF is realized via a product of TF and IDF, i.e, W TF(t ,MashupDoc )uIDF(t ,MashupDoc) .ij ij i ijConsidering that Mashup service description documents are usually short, we use Formula (3) to compute the TF/IDF.W TF(t ,MashupDoc)uIDF2(t ,MashupDoc) (3) ij ij i ijA high TF in the given document and a low document frequency of the term in the whole collection of documents will produce a high weight in TF/IDF. Thus, the TF/IDF tends to filter out the generic terms and preserve the important terms in Mashup service description documents.Based on the user’s recent Mashup usage history, we obtain the user’s interest. A vector of term weights will be used to represent the user’s interest. It is developed by integrating the description documents of all Mashup services used by the user into one big document, and then transforming the document into a vector of terms and weights based on the TF/IDF approach. To match the user’s interest with a Mashup service, every Mashup service description document can also be represented by a vector of 101
generally chosen informally and personally by the item's creator or by its viewer, according to the system.Based on the above the descriptions of Mashup, Web API and tag, we can find that a tag can perfectly describe the function information of a Web API or a Mashup, and a Mashup contains one or more Web API. Thus, the relationship between Mashup services and Web APIs can be seen as a social calling relationship, while the relationships between Mashup services and tags, or Web APIs and tags can be seen as a social marking relationship.(2) The measurement of similarity among Mashup services based on their social relationship informationThe social relationship among two Mashup services is derived by exploring the invocation relationships between Mashup services and Web APIs and the marking relationships between Mashup services and tags. Generally, if two Mashup services (i.e., MSi and MSj ) have similarmarking tags or commonly invoked Web APIs, they are considered to be similar in functionality or probably belong to the same service domain. Based on this consideration, we employ the Jacard similarity coefficient to measure the similarity among Mashup services, defined as SRSimilarity (Social Relationship Similarity) and shown in Formula (7).SRSimilarity(MSi ,MSj )DuAPI(MSi) API(MSj) EuTAG(MSi) TAG(MSj) (7)API(MSi)'API(MSj) TAG(MSi)'TAG(MSj) wherexx x xxundirected edge will be built when two Mashupservices MSi , MS j have the same calling Web APIsor the marking tags.W ( MS , MS ) is the set of edges weights, which ij represent the value of similarity between two interrelated Mashup services, and equal to the value of the social relationship similaritySRSimilarity(MSi ,MSj ),0 dW(MSi ,MSj ) d1.The constructed SN may be disconnected. It has manywhereare the nodes set of corresponding, interrelatedxxVSNMashup services which derived from the social calling Web APIs and the social marking tags, and the nodes set of single,  independent Mashup services which they are not any relationship among them.ij social relationship similarity between MSi and MS j ;and social relationship similarity, 0 d a, b d 1, a   b 1 . similar Mashup services with the total similarityAPI (MSi ), API (MS j ) are the corresponding, calling Web APIs set of Mashup service MSi and MS j ;TSimilarity more than threshold W (e.g.,TSimilarity(MashupSN,MSi ) tW ) in the SN, the totalsimilarity computing will be performed, there may appear the following three situations (W is determined by users according to the experiment results):Case1: No Mashup service nodes whose total similaritywith MashupSN more than W in the SN, there are not anyrecommendation;Case2: Less than K Mashup service nodes whose totalsimilarity with MashupSN more than W in the SN, there are have some recommendations, which are consist of Mashup service nodes whose total similarity with MashupSN morethan W (TSimilarity(MashupSN,MSi)tW) and Mashup services composition paths in the SN from MSi to MS j whoseproduct of social relationship similarity no less than W'(W ' is another similarity threshold for service composition paths, SRSimilarity(MSi , MSk ) u...u SRSimilarity(MSp , MS j ) t W ' ).Case3: No less than K Mashup service nodes whose total similarity with MashupSN more than W in the SN.Considering above three situations, the Mashup service recommendation progress can be described by Algorithm1.TAG(MSi ),TAG(MS j ) are the corresponding, marking Tags set of Mashup service MS and MS ;ijD , E are the weights of user preferences,0dD,Ed1,D E 1.A high SRSimilarity(MSi , MS j ) indicates a strong similarityrelationship between Mashup services MSi and MS j .(3) Social Network ConstructionAfter computing the similarity among Mashup services based on their social relationship information, we construct a Social Network (SN), which can be described with an undirected graph model and as shown in Formula (8).GSN (VSN ,E(MSi,MSj ),W(MSi,MSj ))(8)E(MSi , MS j ) is the set of undirected edges.Anconnected subgraphs and isolated Mashup services nodes.C. Mashup Service RecommendationWe make Mashup service recommendation based on the above user interest model and social network model. When a user searches a Mashup service ( MashupSN ) in the SN,TextSimilarity computing between UserInterest and MS and SRSimilarity computing between MashupSNiand MSi will be performed, and then the total similarity( TSimilarity ) between MashupSN and MS can be(9)computed by following Formula(9). TSimilarity(MashupSN,MS )ii auTextSimilarity(UserInterest,MSi ) b u SRSimilarity(MashupSN , MSi ) auTSi  buSRSi  MSi , MS j  are any two Mashup services, e.g., the ith and jth Mashup services, SRSimilarity(MS , MS ) isa , b When a user searches MashupSN to find the Top-KWhere, MSi is a Mashup service of the SN; respectively are the weights of user preferences for the text 102
  Algorithm1 Top-K Mashup Service Recommendation Algorithm Input: MashupSN , K , W , SN// MashupSN is Mashup service name of user searching; K is Mashup service or service composition path number of waiting forTop-K recommendation; W is similarity threshold; SN is thegenerated social network //Output: Recommended list of similar Mashup services or Mashup44. 45. 46. 47. 48. 49.50. 51. 52. 53. 54.If ( Count K ) break; } End If} End ForRecommend all Count Mashup service nodes and Mashup services composition paths order byTSimilarity(MashupSN,MSi) and SRSimilarity(MSi,MSj) decreasingly, l increasingly;} End IfIf ( Count t K ) // Case3 situation //Recommend Top-K Mashup services to user; }End 1. 2.3. 4. 5.6. 7. 8.9.10.11.12. 13. 14. 15. 16. 17. 18.19. 20. 21.22. 23.24. 25. 26.27. 28. 29. 30. 31. 32. 33. 34. 35.36.37. 38. 39.40.41. 42. 43.services composition pathsStartintCount 0,l 1,j;// l is the actual recommendation path length; Count is the number of Mashup nodes whose total similarity with MashupSN more than W  in the SN //For(allMSi ofthe VMSN  inthe SN )// extracting all the Mashup services nodesfrom the nodes set VSSN in the SN //{ If (TSimilarity(MashupSN,MS ) tW ) iIV . EXPERIMENTS // Compute the TSimilarity with Formula (9) //// Case1 situation //End IfIf(0 Count K) //Case2situation//In this section, we conduct a set of experiments to evaluate the performance of our proposed Mashup service recommendation approach, and compare it with the mere user interest based approach and the mere social network based approach.(1) Experiments Settings and Evaluation MetricsWe crawled a Mashup service dataset from Programmable web.com. The dataset contains 6076 Mashups, 4492 Web APIs, and 1736 Tags. We conduct a set of large- scale real-world experiments to evaluate the quality of the Top-K Mashup services or Mashup services composition paths recommended by our proposed approach. For the convenience of the experiment, some weights will be set in advance, e.g., D E 1/ 2 , a b 1/ 2 ; some thresholds will       Count    ; End If }End ForIf ( Count0 ) Return NULL;{ V 'SSN = Remove all these Count Mashup Services nodes from V in the MSN ;be given the initial value by the user and then adjusted  3SN   For(all MSi  ofthe V'SN  inthe SN )according to the experiments effects, e.g., W 1/4, W' 1 ; the max length of Mashup service composition path recommendation generally set to 4, e.g., MaxLength 4 .{ If (l MaxLength&&SRSimilarity(MSi,MSj)tW'&&Count K) // MaxLength is the max length of Mashup servicecomposition path recommendation, which generally is set by user, W ' is a similarity threshold for servicecomposition path, which can be set by user, use the Breadth-first traversal algorithm to find the nextneighbor Mashup service node of MSi , compute the social relationship similarity and construct Mashup service composition path in the SN //{l  ; j  ;When searching Mashup services, users usually focus on the top K ranked Mashup services recommend by the search algorithm. Discounted Cumulative Gain (DCG) is a widely used measure for evaluating the effectiveness of a Web search algorithm in information retrieval. Using a graded relevance scale of documents in a search engine result set, DCG measures the usefulness (or gain) of a document based on its position in the result list. The gain is accumulated from the top of the result list to the bottom with the gain of each result discounted at lower ranks. To evaluate the quality of Top-K similar Mashup service (or Mashup services composition paths) recommendation list generated by our proposed approach, we use the DCG method as performance evaluation standard. DCG is defined as:// j is the number of the neighbor Mashup service node of MSi , the value of it can be gotten byusing the Breadth-first traversal algorithm // If (SRSimilarity(MSi,MSj 1)uSRSimilarity(MSj 1,MSj)tW')SRSimilarity(MSi,MSj ) SRSimilarity(MSi,MSj 1)uSRSimilarity(MSj 1,MSj );Count    ; }// Perform the social relationship similarity computing with theFormula(7) and get their product no less than W ' to find the Mashup services composition path in the SN from MSi to MS j //End Ifadd Mashup services composition path L:MSi,MSi 1,...,MSj totherecommendedlist;reli is the score of the ith rank position, and DCGK is thediscounted cumulative gain of the Top-K score in the recommendation list.(2) Experiments Comparison and AnalysisWe evaluate our approach by performing experimental comparison and analysis based on real-world Mashup services. We randomly choose 10 Mashup services in the(10) Where, i is the rank position of recommendation list,
original dataset for a user, which are considered as the user’s Mashup service usage history. We take Mashup service “productdose” as the user searching example, as shown in Figure.6(a) (“productdose” is ProductDose Online shopping Mashup service for men built using the shopping.com API, its URL is http://www.productdose.com). For the sake of comparison and analysis, we perform the following two evaluations.x User Interest Relevance EvaluationWe use the DCG method as described in Formula (11) toevaluate the matching degree between the user’s interest and the top K similar Mashup services (or Mashup services composition paths) in the recommendation list.our proposed approach, while the mere social network based approach may recommends Mashup services with less user interest relevance to the user.As shown in Figure 2, the Top-K DCG values of our proposed approach are lower than those of the mere user interest based approach. For example, 2.13 of our proposed approach compared to 2.25 of the mere user interest-based approach for Top-5, 2.97 of our proposed approach compared to 3.11 of the mere user interest-based approach for Top-10. In addition, with the increase of K value, the gap of Top-K DCG values between our proposed approach and the mere user interest-based approach is not large. These illustrate that the mere user interest-based approach recommends Mashup services high-relevant with the user no matter whether social relationship similarity of Mashup services is good or not, while our proposed approach recommends Mashup services with higher social relationship similarity and good user interest relevance.Where,i is the rank position of Mashup service MSi inTop-K similar Mashup services (or Mashup servicescomposition paths) recommendation list, TSi is the textsimilarity between user interest UserInterest and Mashupservice MS , and DCG is the discounted cumulative gain iKof Top-K user interest similarities in the Mashup services (or Mashup services composition paths) recommendation list. A large DCGK value means high similarity degrees between the user interest and the Top-K recommended Mashup services (or Mashup services composition paths). The purpose of this experiment is to evaluate the user interest relevance of recommended Mashup services (or Mashup services composition paths).Service Social-relationship Relevance Evaluation   We also use the DCG method as described in Formula (12) to evaluate the matching degree between the service social relationship and the top K similar Mashup services (or Mashup services composition paths) recommendation list.Where,i is the rank position of Mashup service MSi inWe can see from Figure 1 that the Top-K DCG values of our proposed approach are greatly higher than the mere social network based approach. For example, 0.43 of our proposed approach compared to 2.13 of the mere social network based approach for Top-5, 0.56 of our proposed approach compared to 2.97 of the mere social network based approach for Top-10. Furthermore, with increase of K, Top- K DCG values of our proposed approach are constantly much higher than those of the mere social network based approach, and the gap between them becomes increasingly larger. These illustrate that more Mashup services much- relevant with the user are recommended in high positions byTop-K similar Mashup services (or Mashup services composition paths) recommendation list, SRSi is the social relationship similarity between the searched Mashup service name by the user MashupSN and Mashup service MSi , andDCGK is the discounted cumulative gain of Top-K socialrelationship similarities in the similar Mashup services (or Mashup services composition paths) recommendation list . A large DCGK value means high social relationship similarities of the Top-K recommended Mashup services (or Mashup services composition paths). The purpose of this experiment is to evaluate service social-relationship relevance of recommended Mashup services (or Mashup services composition paths).Top-15Top-20K 104DCG ValuesDCG Values
60 50 40 30 20 100Figure.3 shows the Top-K DCG values of our proposed approach are little lower than those of the mere social network-based approach. For example, 21.3 of our proposed approach is compared with 29.3 of the mere social network- based approach when Top-K=5 and 29.7 of our proposed approach is compared with 40.0 of the mere social network- based approach when Top-K=10. In addition, with the increase of K, the gap of Top-K DCG values between our proposed approach and the mere social network-based approach becomes small. From the experiments results, we can find that the mere social network-based approach recommends Mashup services with high social relationship similarity no matter whether the user is interested in the Mashup services or not, while our proposed approach recommends Mashup services which not only are interesting to the user but also have good social-relationship relevance.As shown in Figure.4, the Top-K DCG values of our proposed approach are greatly higher than the mere user interest-based approach. For example, 21.3 of our proposed approach compared to 5.6 of the mere user interest-based approach for Top-5, 29.7 of our proposed approach compared to 7.3 of the mere user interest-based approach for Top-10. What’s more, with the increase of K value, the gap of Top-K DCG values between our proposed approach and the mere user interest-based approach become larger. Thus, our proposed approach can recommends Mashup services which the user is interested in with higher social relationship similarity, while the mere user interest-based approach recommends Mashup services with less social relationship relevance to the user.40 35 30 25 20 15 105 0V. PROTOTYPE SYSTEM IMPLEMENTATIONWe developed a Mashup service recommendation prototype system to realize the Mashup service recommendation approach based on user interest and social network. The Mashup service recommendation prototype system has functionalities of Mashup service crawling and registration, Mashup service search and management, TextSimilarity and SRSimilarity computing, Mashup service recommendation, and so on. Its framework is as shown in Figure 5.Figure 5 Mashup Service Recommendation Prototype System FrameworkOur developed Mashup service recommendation prototype system can be accessed (http://125.221.225.2: 8080/Mashup/), as shown in Figure 6. Figure 6.a shows the login page of the system, by which a user can search a Mashup service “productdose”. Figure 6.b is the corresponding recommendation result page for the user which shows generated Top-K similar Mashup services or Mashup services composition paths in the SN. With the growth in the number of Mashup services, the system will help user to find the expected, best interested Mashup service rapidly and accurately.VI. CONCLUSIONSThis paper presents a Mashup service recommendation approach based on user interest and social network. A Mashup service recommendation prototype system is developed to implement the proposed approach. Large-scale experiments based on a real-world dataset validate the performance of our approach. Our approach can effectively recommend not only Mashup services but also possible Mashup services composition paths by considering the users’ personal interest and the relationships among services. In the future work, we will further explore the social information among Mashup services, Web APIs and tags to build more useful service networks and make more qualified recommendations to users. In addition, it is also interesting to employ the complex network theory to analyze static and dynamic features of the social networks.ACKNOWLEDGMENTThe work was supported by the National Natural Science Foundation of China under grant No. 61272063 and 61100054, Program for New Century Excellent Talents in University under grant No.NCET-10-0140, Excellent Youth Foundation of Hunan Scientific Committee No.11JJ1011, Hunan Provincial Natural Science Foundation of China under grant No. 12JJB009 and 12JJ6064, and Scientific Research Fund of Hunan Provincial Education Department of China under grant No.09K085, 11B048 and 12K105, Research Learning and Innovative Experiment Plan of Hunan University of Science and Technology of China under grant No. 105-143084.